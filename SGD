import numpy as np
import pandas as pd
#Rating matrix R
R = np.array([[4,0,2,0,1],
             [0,0,2,3,1],
             [4,1,2,0,1],
             [4,1,2,5,1],
             [3,0,5,0,2],
             [1,0,3,0,4]])

'''
@Pamaeter input
R:M*N rating matrix
K:latent factor dimension
max_iter:Maximium iteration times
alpha: step length
lamda:regularization parameter lambda

@Output
After factorization
P:Set user Matric M*k
Qï¼šSet Item Matrix N*K
'''

# hyperparameters

K = 5
max_iter = 5000
alpha = 0.0002
lamda = 0.004


# Algorithm
def LFM_grad_desc(R, K, max_iter, alpha=0.0002, lamda=0.002):
    # define dimension parameters
    M = len(R)
    N = len(R[0])

    # Random generate  P and Q
    P = np.random.rand(M, K)
    Q = np.random.rand(N, K)
    Q = Q.T #Transpose Q

    # Start iteraion
    for step in range(max_iter):
        # Traversing all users u and items i, the corresponding feature vectors Pu, Qi gradient descent
        for u in range(M):
            for i in range(N):
                # For all rating >0 get the error
                if R[u][i] > 0:
                    eui = np.dot(P[u, :], Q[:, i]) - R[u][i]

                    # Renew Pu and Qi
                    for k in range(K):
                        P[u][k] = P[u][k] - alpha * (2 * eui * Q[k][i] + 2 * lamda * P[u][k])
                        Q[k][i] = Q[k][i] - alpha * (2 * eui * P[u][k] + 2 * lamda * Q[k][i])

        # finished updating all eigenvector
        predR = np.dot(P, Q)

        # Calculate loss
        cost = 0
        for u in range(M):
            for i in range(N):
                if R[u][i] > 0:
                    cost += (np.dot(P[u, :], Q[:, i]) - R[u][i]) ** 2
                    #  Add regularization lambda
                    for k in range(K):
                        cost += lamda * (P[u][k] ** 2 + Q[k][i] ** 2)

        if cost < 0.001:
            break

    return P, Q.T, cost
P,Q,cost = LFM_grad_desc(R,K,max_iter,alpha,lamda)
'''
print(P)
print(Q)
print(cost)
print(R)
'''
predR = P.dot(Q.T)
#Predict Matrix
print(predR)
print("p is",P)
print("Q is",Q)
